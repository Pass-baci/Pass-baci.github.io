<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Baci&#39;s blog</title>
    <link>https://Pass-baci.github.io/</link>
    <description>Recent content on Baci&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 27 Dec 2021 10:52:24 +0800</lastBuildDate><atom:link href="https://Pass-baci.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计数据密集型应用 笔记</title>
      <link>https://Pass-baci.github.io/post/%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8-%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 27 Dec 2021 10:52:24 +0800</pubDate>
      
      <guid>https://Pass-baci.github.io/post/%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8-%E7%AC%94%E8%AE%B0/</guid>
      <description>一、可靠性（即使出现问题，也能继续正常工作） 1.应用程序表现出用户所期望的功能。 2.允许用户犯错，允许用户以出乎意料的方式使用软件。 3.在预期的负载和数据量下，性能满足要求。 4.系统能防止未经授权的访问和滥用。 二、可伸缩性 1.可伸缩性（Scalability） 是用来描述系统应对负载增长能力的术语。但是请注意，这不是贴在系统上的一维标签：说“X可伸缩”或“Y不可伸缩”是没有任何意义的。相反，讨论可伸缩性意味着考虑诸如“如果系统以特定方式增长，有什么选项可以应对增长？”和“如何增加计算资源来处理额外的负载？”等问题。 2.纵向伸缩：也称为垂直伸缩，转向更强大的机器 3.横向伸缩：也称为水平伸缩，将负载分布到多台小机器上 三、可维护性 良好的抽象可以帮助降低复杂度，并使系统易于修改和适应新的应用场景。良好的可操作性意味着对系统的健康状态具有良好的可见性，并拥有有效的管理手段。 四、负载 负载可以用一些称为 负载参数（load parameters） 的数字来描述。参数的最佳选择取决于系统架构，它可能是每秒向Web服务器发出的请求、数据库中的读写比率、聊天室中同时活跃的用户数量、缓存命中率或其他东西 五、性能 1. 吞吐量：每秒可以处理的数据数量 2. 响应时间：客户端发送请求到接收响应之间的时间，视为一个可以测量的数值分布（distribution），而不是单个数值。 3. 延迟：某个请求等待处理的持续时长，在此期间它处于 休眠（latent） 状态，并等待服务 </description>
    </item>
    
    <item>
      <title>Go 笔记</title>
      <link>https://Pass-baci.github.io/post/go-%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 27 Dec 2021 09:44:08 +0800</pubDate>
      
      <guid>https://Pass-baci.github.io/post/go-%E7%AC%94%E8%AE%B0/</guid>
      <description>一、什么是Goroutine？该如何停止它？ Goroutine是与其他函数同时运行的函数，可以认为Go协程是轻量级协程，由Go运行来管理，当被调用的函数返回时或main函数结束时，启动的Goroutine也一并结束。 停止方式：可通过channel由外部发送结束信号，Goroutine可通过接收该信号来进行停止 二、Go中的同步锁有什么特点？作用是什么？ 当一个Goroutine获得Mutex后，其他Goroutine只能等待，除非该Goroutine释放了该 Mutex； RWMutex在读锁占用的情况下，会阻止写，但不阻止其他Goroutine进行读，RWMutex在写锁占用的情况下会阻止写跟读，整个锁由该Goroutine独占； 同步锁的作用是保证资源在使用时的独有性，不会因为并发而导致数据混乱，保证系统的稳定性。 三、Go中channel有什么特点，需要注意什么？ 1.如果给一个nil的channel发送数据，会造成永远的阻塞 2.如果从一个nil的channel中接收数据，也会造成永远的阻塞 3.给一个已经关闭的channel发送数据，会引起panic 4.从一个已经关闭的channel接收数据，如果缓冲区为空，则返回一个对应类型的零值 5.无缓冲的channel是同步的，有缓冲的channel是非同步的 </description>
    </item>
    
    <item>
      <title>Hugo搭建博客笔记</title>
      <link>https://Pass-baci.github.io/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 23 Dec 2021 16:10:20 +0800</pubDate>
      
      <guid>https://Pass-baci.github.io/post/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/</guid>
      <description>资源链接 Hugo官网DOC：https://gohugo.io/getting-started/usage/ Hugo主题官网：https://themes.gohugo.io/ Hugo安装包：https://github.com/gohugoio/hugo/releases 一、windows安装Hugo 1. 根据机型通过github releases下载对应的安装包，进行解压 2. 将bin目录设置到环境变量（PATH） 3. 使用 hugo version来进行校验 二、 创建博客项目目录（站点） hugo new site mybolg ---&amp;gt;(将会在当前目录创建mybolg目录) 三、 添加主题 cd myblog git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 修改config.toml配置文件 添加一行：theme = &amp;#34;ananke&amp;#34; 四、创建博客文章 hugo new content/posts/my-first-post.md ---&amp;gt; (部分主题的文章目录名称为post) 文件内容如下 --- title: &amp;#34;My First Post&amp;#34; ---&amp;gt;(文章标题) date: 2019-03-26T08:47:11+01:00 ---&amp;gt;(日期) draft: true ---&amp;gt;(是否为草稿，true：为草稿，不显示在页面中，false：显示在页面中) --- 五、启动hugo服务 hugo server -D 六、构建静态页面 hugo -D </description>
    </item>
    
    <item>
      <title>Title_of_the_post</title>
      <link>https://Pass-baci.github.io/post/title_of_the_post/</link>
      <pubDate>Sat, 18 Dec 2021 16:32:17 +0800</pubDate>
      
      <guid>https://Pass-baci.github.io/post/title_of_the_post/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://Pass-baci.github.io/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Pass-baci.github.io/readme/</guid>
      <description>&amp;lsquo;Hello World!&amp;rsquo;</description>
    </item>
    
  </channel>
</rss>
